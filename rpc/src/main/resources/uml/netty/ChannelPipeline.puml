@startuml
interface ChannelPipeline {
}
class DefaultChannelPipeline {
    head: AbstractChannelHandlerContext
    tail: AbstractChannelHandlerContext
    channel: Channel
}
DefaultChannelPipeline -up..|> ChannelPipeline
together {
    class ChannelPipeline
    class DefaultChannelPipeline
}


interface Channel {
}
abstract class AbstractChannel {
    DefaultChannelPipeline pipeline
    Unsafe unsafe
    EventLoop eventLoop
}
AbstractChannel -up..|> Channel
DefaultChannelPipeline -left--o "pipeline" AbstractChannel
class NioSocketChannel {
}
NioSocketChannel -up--|> AbstractChannel
together {
    class Channel
    class AbstractChannel
    class NioSocketChannel
}
NioSocketChannel -down--o "channel" DefaultChannelPipeline

abstract class AbstractChannelHandlerContext {
    AbstractChannelHandlerContext prev
    AbstractChannelHandlerContext next
    DefaultChannelPipeline pipeline
    boolean inbound
    boolean outbound
    AbstractChannelHandlerContext findContextInbound()
    AbstractChannelHandlerContext findContextOutbound()
}
DefaultChannelPipeline -right--o "pipeline" AbstractChannelHandlerContext

class DefaultChannelHandlerContext {
    ChannelHandler handler
}
DefaultChannelHandlerContext -up--|> AbstractChannelHandlerContext
together {
    class AbstractChannelHandlerContext
    class DefaultChannelHandlerContext
}

interface ChannelHandler {
}
interface ChannelOutboundHandler {
}
ChannelOutboundHandler --|> ChannelHandler
interface ChannelInboundHandler {
}
ChannelInboundHandler --|> ChannelHandler
class HeadContext {
    boolean outbound: true
    Unsafe unsafe
    void bind(...)
    void connect(...)
}
HeadContext -up--|> AbstractChannelHandlerContext
HeadContext -down--|> ChannelInboundHandler
HeadContext -down--|> ChannelOutboundHandler
HeadContext -down--o "head" DefaultChannelPipeline
HeadContext "next"-left-o DefaultChannelHandlerContext
DefaultChannelHandlerContext "prev"-right-o HeadContext
class TailContext {
    boolean inbound: true
}
TailContext -up--|> AbstractChannelHandlerContext
TailContext -down--|> ChannelInboundHandler
TailContext -down--|> ChannelOutboundHandler
TailContext -down--o "tail" DefaultChannelPipeline
DefaultChannelHandlerContext "next"-left-o TailContext
TailContext "prev"-right-o DefaultChannelHandlerContext
together {
    class ChannelHandler
    class ChannelInboundHandler
    class ChannelOutboundHandler
}

class CustomerChannelHandler {
}
CustomerChannelHandler -down--o DefaultChannelHandlerContext
CustomerChannelHandler -down--|> ChannelInboundHandler
CustomerChannelHandler -down--|> ChannelOutboundHandler

'hide CustomerChannelHandler


@enduml